const express = require('express');
const router = express.Router();
const Note = require('../models/Note');
const Utilisateur = require('../models/Utilisateur');
const auth = require('../middleware/auth');

// üéØ Donn√©es des notes par parcours
const parcoursNotes = {
    MTI: [
        { code: "881.1", nom: "Acc√©l√©ration mat√©rielle", coefficient: 1.5 },
        { code: "881.2", nom: "TP Mise en ≈ìuvre", coefficient: 1.5 },
        { code: "882.1", nom: "Supervision industrielle", coefficient: 1.5 },
        { code: "882.2", nom: "Supervision r√©seau informatique √©crit", coefficient: 0.5 },
        { code: "882.3", nom: "Supervision r√©seau informatique TP", coefficient: 1 },
        { code: "883.1", nom: "Commande de syst√®mes num√©riques √©crit 1", coefficient: 1.5 },
        { code: "883.2", nom: "Commande de syst√®mes num√©riques √©crit 2", coefficient: 1.5 },
        { code: "884.1", nom: "Outils de mise en forme de l'information", coefficient: 1.5 },
        { code: "884.2", nom: "Travaux Pratiques", coefficient: 1.5 },
        { code: "885.1", nom: "T√©l√©mesure et transmission TP", coefficient: 1.5 },
        { code: "885.2", nom: "T√©l√©mesure et transmission √©crit", coefficient: 1.5 },
    ],
    ISHM: [
        { code: "873.1", nom: "Simulation des syst√®mes automatiques √©crit", coefficient: 1.5 },
        { code: "873.2", nom: "Simulation des syst√®mes automatiques TP", coefficient: 1.5 },
        { code: "874.1", nom: "Traitement num√©rique du signal √©crit", coefficient: 3 },
        { code: "874.2", nom: "Traitement num√©rique du signal TP", coefficient: 1.5 },
        { code: "874.3", nom: "M√©thode r√©gulation num√©rique √©crit", coefficient: 1.75 },
        { code: "874.4", nom: "M√©thode r√©gulation num√©rique TP", coefficient: 0.5 },
        { code: "874.5", nom: "Repr√©sentation d'√©tat √©crit", coefficient: 1.75 },
        { code: "874.6", nom: "Repr√©sentation d'√©tat TP", coefficient: 0.5 },
        { code: "882.1", nom: "Supervision industrielle", coefficient: 1.5 },
        { code: "882.2", nom: "Supervision r√©seau informatique √©crit", coefficient: 0.5 },
        { code: "882.3", nom: "Supervision r√©seau informatique TP", coefficient: 1 },
    ],
    IMEEN: [
        { code: "861.1", nom: "Biomasse/Biogaz", coefficient: 1.5 },
        { code: "861.2", nom: "Bois √©nergie d√©chet", coefficient: 1.5 },
        { code: "862.1", nom: "Mod√©lisation thermique du b√¢timent √©crit", coefficient: 0.75 },
        { code: "862.2", nom: "Mod√©lisation thermique du b√¢timent TP", coefficient: 0.75 },
        { code: "862.3", nom: "√âtude des mat√©riaux", coefficient: 1.5 },
        { code: "862.4", nom: "Chauffage ventilation climatisation", coefficient: 1.5 },
        { code: "862.5", nom: "BIM √©crit", coefficient: 0.75 },
        { code: "862.6", nom: "BIM TP", coefficient: 0.75 },
        { code: "863.1", nom: "Technologie des √©nergies renouvelables", coefficient: 3 },
        { code: "863.2", nom: "M√©trologie et cam√©ra thermique", coefficient: 3 },
    ]
};

// üì• R√©cup√©rer toutes les notes de l‚Äôutilisateur
router.get('/', auth, async (req, res) => {
    try {
        const notes = await Note.find({ utilisateurId: req.utilisateur.id });
        res.json(notes);
    } catch (err) {
        res.status(500).json({ message: 'Erreur serveur.' });
    }
});

// ‚ûï Ajouter une note manuellement (pour "Autre" ou si note personnalis√©e)
router.post('/', auth, async (req, res) => {
    const { code, nom, note, coefficient } = req.body;

    try {
        const nouvelleNote = new Note({
            code,
            nom,
            note,
            coefficient,
            utilisateurId: req.utilisateur.id
        });

        await nouvelleNote.save();
        res.status(201).json({ message: 'Note ajout√©e.', note: nouvelleNote });
    } catch (err) {
        res.status(500).json({ message: 'Erreur serveur.' });
    }
});

// üîÅ Modifier une note
router.put('/:id', auth, async (req, res) => {
    try {
        const note = await Note.findOneAndUpdate(
            { _id: req.params.id, utilisateurId: req.utilisateur.id },
            req.body,
            { new: true }
        );

        if (!note) return res.status(404).json({ message: 'Note introuvable.' });

        res.json({ message: 'Note modifi√©e.', note });
    } catch (err) {
        res.status(500).json({ message: 'Erreur serveur.' });
    }
});

// üîÑ Initialisation automatique des notes selon parcours (√† appeler c√¥t√© frontend au 1er chargement)
router.post('/init', auth, async (req, res) => {
    try {
        const utilisateur = await Utilisateur.findById(req.utilisateur.id);
        if (!utilisateur) return res.status(404).json({ message: "Utilisateur non trouv√©." });

        const parcours = utilisateur.parcours;
        const notesParcours = parcoursNotes[parcours];

        if (!notesParcours) {
            return res.json({ message: "Pas de notes automatiques pour ce parcours." });
        }

        // V√©rifie si d√©j√† initialis√©
        const deja = await Note.findOne({ utilisateurId: utilisateur.id });
        if (deja) {
            return res.json({ message: "Notes d√©j√† initialis√©es." });
        }

        // Cr√©e les notes avec note = 0
        const notes = notesParcours.map(n => ({
            code: n.code,
            nom: n.nom,
            coefficient: n.coefficient,
            note: 0,
            utilisateurId: utilisateur.id
        }));

        await Note.insertMany(notes);
        res.status(201).json({ message: "Notes initialis√©es avec succ√®s." });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Erreur serveur." });
    }
});

module.exports = router;
